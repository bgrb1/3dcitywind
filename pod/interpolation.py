import numpy as np
import pandas as pd

def interpolate(df, A, WDref, newWD, newWS, compression_type="float16"):
    """
    Credit to Carola Ebert, she wrote parts of the code used in this function

    Interpolate the datapoints from df for a new wind direction and speed using POD interpolation
    The interpolated values will be written directly into df as new columns

    :param df: pandas dataframe generated by model_generation.generate with the point-specific interpolation parameters
    and target for the interpolated result values
    :param A: another interpolation parameter created by model_generation.generate, given as numpy array
    :param WDref: another interpolation parameter created by model_generation.generate, given as numpy array
    :param newWD: new wind direction in degrees
    :param newWS: new wind speed in m/s
    :param compression_type: datatype to which the calculated interpolation parameters will be compressed to. float16 has proven to
    barely yield any significant loss in accuracy in this use case
    """
    #extract means for each wind component
    means = np.concatenate([df["mean_u"].to_numpy(), df["mean_v"].to_numpy(), df["mean_w"].to_numpy()], axis=0)

    #extract parameters for each wind component and reconstruct Psi matrix for POD interpolation
    Psi_u = df[[col for col in df.columns if col.startswith("u_")]].to_numpy()
    Psi_v = df[[col for col in df.columns if col.startswith("v_")]].to_numpy()
    Psi_w = df[[col for col in df.columns if col.startswith("w_")]].to_numpy()
    Psi = np.concatenate([Psi_u, Psi_v, Psi_w], axis=0)
    del Psi_u, Psi_v, Psi_w

    wdPredict = np.float_(newWD)
    wsPredict = np.float_(newWS)

    AInterp = np.zeros(len(WDref))
    for i in range(len(A)):
        AInterp[i] = np.interp(wdPredict, WDref, A[i, :])  # Interpolation of new POD coefficients

    U_Interp = ((np.dot(Psi, AInterp) + means) * wsPredict)  # add mean and multiply Uref to get the new wind field
    Ux_Interp = np.float_(np.split(U_Interp, 3)[0]).astype(compression_type)  # extract wind speed components
    Uy_Interp = np.float_(np.split(U_Interp, 3)[1]).astype(compression_type)  # extract wind speed components
    Uz_Interp = np.float_(np.split(U_Interp, 3)[2]).astype(compression_type)  # extract wind speed components
    Umag_Interp = np.float_(np.sqrt(Ux_Interp ** 2 + Uy_Interp ** 2 + Uz_Interp ** 2)).astype(compression_type)  # calc magnitude of wind speed
    del Psi, means

    df.reset_index(drop=True, inplace=True)

    #write results to df as new columns
    df["u"] = pd.Series(Ux_Interp)
    df["v"] = pd.Series(Uy_Interp)
    df["w"] = pd.Series(Uz_Interp)
    df["mag"] = pd.Series(Umag_Interp)
    del U_Interp, Ux_Interp, Uy_Interp, Uz_Interp, Umag_Interp